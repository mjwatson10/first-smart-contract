import "./Ownable.sol";
import "./Destroyable.sol";
pragma solidity 0.5.12;



contract HelloWorld is Ownable, Destroyable{
    //state variables
    
    //data locations: storage(var), memory(let), stack(local stack which is deleted once function is done)

    
    struct Person {
        uint id;
        string name;
        uint age;
        uint height;
        bool senior;
        //address walletAddress;
    }
    
//event
    event personCreated(string name, bool senior);
    event personDeleted(string name, bool senior, address deletedBy);
    
    
//address

    uint public balance;
    
//modifier

    modifier costs(uint cost){
        require(msg.value >= cost);
        _;
    }
    

    
//mapping
    mapping(address => Person) private people;
    address[] private creators;


//function 
    function createPerson(string memory name, uint age, uint height) public payable costs(100 wei){
     
     require(age <= 150, "Please enter valid age");
     //check if payment is >= 1
     balance += msg.value;
     
     Person memory newPerson;
     //newPerson.id = people.length;
     newPerson.name = name;
     newPerson.age = age;
     newPerson.height = height;
        
        if(age > 65){
             newPerson.senior = true;
        }
        else{
         newPerson.senior = false;
        }
     insertPerson(newPerson);
     creators.push(msg.sender);
    //people[msg.sender] == newPerson;
     assert(
         keccak256(
             abi.encodePacked(
                 people[msg.sender].name, 
                 people[msg.sender].age, 
                 people[msg.sender].height, 
                 people[msg.sender].senior
                 )
                    ) == keccak256(
                     abi.encodePacked(
                         newPerson.name, 
                         newPerson.age, 
                         newPerson.height, 
                         newPerson.senior)
                         )
                    );
    //event
        emit personCreated(newPerson.name, newPerson.senior);
 }
 
 function insertPerson(Person memory newPerson) private{
    address creator = msg.sender;
    people[creator] = newPerson;
 }
 
 function getPerson() public view returns(string memory name, uint age, uint height, bool senior){
     address creator = msg.sender;
     return (people[creator].name,
             people[creator].age, 
             people[creator].height, 
             people[creator].senior);
 }
 
 function deletePerson(address creator) public onlyOwner{
     string memory name = people[creator].name;
     bool senior = people[creator].senior;
     delete people[creator];
     assert(people[creator].age == 0);
     emit personDeleted(name, senior, owner);
     
 }
 
 function getCreator(uint index) public view onlyOwner returns(address){ //modifier are before returns
     require(msg.sender == owner, "Caller needs to be owner");
     return creators[index];
 }
 
 function withDrawAll() public onlyOwner returns(uint){
     uint toTransfer = balance;
     balance = 0;
     msg.sender.transfer(toTransfer);
     return toTransfer;
 }
    
    
    
}
